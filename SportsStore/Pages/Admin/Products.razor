@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>
@code{
    public IStoreRepository Repository => Service;
    public IEnumerable<Product> ProductData { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }
    public async Task UpdateData()
    {
        ProductData = await Repository.Products.ToListAsync();
        Console.WriteLine(ProductData.Count());
    }
    public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
    public string GetEditUrl(long id) => $"/admin/products/edit/{id}";
    public async Task DeleteProduct(Product p)
    {
        Repository.DeleteProduct(p);
        await UpdateData();
    }
}
<table class="table table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Price</th>
            <th>Category</th>
        </tr>
    </thead>
    <tbody>
        
        @if(ProductData?.Count() > 0)
        {
            @foreach(Product p in ProductData)
            {
                <tr>
                    <td>@p.ProductID</td>
                    <td>@p.Name</td>
                    <td>@p.Category</td>
                    <td>@p.Price.ToString("c")</td>
                    <td>
                        <NavLink class="btn btn-sm btn-info" href="@GetDetailsUrl(p.ProductID)">
                            Details
                        </NavLink>
                        <NavLink class="btn btn-sm btn-success" href="@GetEditUrl(p.ProductID)">
                            Edit
                        </NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="@(e => DeleteProduct(p))">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center text-danger"> No Product</td>
            </tr>
        }
    </tbody>
</table>

<NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>